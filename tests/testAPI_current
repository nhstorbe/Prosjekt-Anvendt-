import sys
import os
import unittest
from unittest.mock import patch, Mock

# Filsti
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'scr')))
from mappe1.API_current import make_weatherJSON, locations


class TestMakeWeatherJSON(unittest.TestCase):

    @patch('mappe1.API_current.requests.get')  # Mock requests.get inne i mappe1.API

    def test_make_weatherJSON_success(self, mock_get):
        # Dummy respons som ligner p√• Yr API
        fake_json = {
            "properties": {
                "timeseries": [
                    {
                        "time": "2025-05-25T00:00:00Z",
                        "data": {
                            "instant": {
                                "details": {
                                    "air_temperature": 12.3,
                                    "wind_speed": 5.1
                                }
                            },
                            "next_1_hours": {
                                "details": {
                                    "precipitation_amount": 0.4
                                }
                            }
                        }
                    }
                ]
            }
        }

        # Sett opp mock-respons
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = fake_json
        mock_get.return_value = mock_response

        result = make_weatherJSON("London")
        self.assertIn("properties", result)
        self.assertEqual(result["properties"]["timeseries"][0]["data"]["instant"]["details"]["air_temperature"], 12.3)

    def test_make_weatherJSON_invalid_place(self):
        with self.assertRaises(Exception) as context:
            make_weatherJSON("Asgard")  # Ikke i locations
        self.assertIn("ikke funnet", str(context.exception))


if __name__ == '__main__':
    unittest.main()







